/*=== Hello you are in parent MAKER ===*/
/* This you can use for create full Component with class name */
@mixin Component($component_name,$modify,$params,$style) {
    @each $size,$v_size in $params {
        .#{$component_name}_#{$modify}_#{$size}{
            #{$style}:$v_size;
        }
    }
}
/* This you should use for create some styles of your own component */
@mixin Create($modify,$params,$style) {
    @each $size,$v_size in $params {
        &_#{$modify}_#{$size}{
            #{$style}:$v_size;
        }
    }
}
@mixin CreateOffModify($params,$style) {
    @each $size,$v_size in $params {
        &_#{$size}{
            #{$style}:$v_size;
        }
    }
}

@mixin CreateBackImageRange($modify, $params, $style) {
    @each $key,$value in $params {
        &_#{$modify}_#{$key}{
            #{$style}:url(#{$value});
        }
    }
    
}

@mixin CreateMedia($modify,$params,$style,$breakpoint) {
    @media only screen and (max-width:$breakpoint) {
        @each $size,$v_size in $params {
            &_#{$modify}_#{$size}{
                #{$style}:$v_size;
            }
        }
    }
}

@mixin CreateMediaMobFirst($modify,$params,$style,$breakpoint) {
    @media only screen and (min-width:$breakpoint) {
        @each $size,$v_size in $params {
            &_#{$modify}_#{$size}{
                #{$style}:$v_size;
            }
        }
    }
}

@mixin CreateRange($params,$style){
    @each $class_name,$style_value in $params {
        &_#{$class_name}{
            #{$style}:#{$style_value};
        }
    }
}

@mixin CreateRangeAdditional($params,$additional_params,$style,$style_additional){
    @each $class_name,$style_value in $params {
        &_#{$class_name}{
            #{$style}:#{$style_value};
            @each $in_style,$in_value in $additional_params{
                @if $in_style == $class_name{
                    #{$style_additional}:#{$in_value};
                }
            }
        }
    }
}

@mixin SetConfig($params) {
    @each $style,$value in $params {
        #{$style}:$value;
    }
}

@mixin SetHoverConfig($params) {
    &:hover {
        @each $style, $value in $params {
            #{$style}: $value;
        }
    }
}
@mixin SetActiveConfig($params) {
    &:active,
    &:focus{
        @each $style, $value in $params {
            #{$style}: $value;
        }
    }
}
@mixin SetDisabledConfig($params) {
    &[disabled]{
        @each $style, $value in $params {
            #{$style}: $value;
        }
    }
}
@mixin SetConfigMedia($params,$breakpoint) {
    @media only screen and (max-width: $breakpoint) {
        @each $style,$value in $params {
            #{$style}:$value;
        }
    }
}

@mixin SetConfigMediaMobFirst($params,$breakpoint) {
    @media only screen and (min-width:$breakpoint) {
        @each $style,$value in $params {
            #{$style}:$value;
        }
    }
}

@mixin SetExtensions($params) {
    @each $ext_name in $params {
        @extend %#{$ext_name};
    }
}

@mixin ChangeVar($style,$new_value,$breakpoint){
    @media only screen and (max-width:$breakpoint) {
        #{$style}:$new_value;
    }
}

@mixin ChangeVarMobFirst($style,$new_value,$breakpoint){
    @media only screen and (min-width:$breakpoint) {
        #{$style}:$new_value;
    }
}

@mixin InitialComponent($config){
    @each $type_style,$style_values in $config{
        // $str_start: str-length('$button');
        // $str_end: str-length(quote($style_values));
        // $modify: $style_values;
        &{
            @include Create($type_style,$style_values,$type_style);
        }
    }
}
/* Mixins for _creater section  */
@mixin InitialBackImage ($url, $backSize, $position) {
    background-image: url($url);
    background-repeat: no-repeat;
    background-size: $backSize;
    background-position: $position;
}
/*
* Create templates for component via range of template name and styles
*
* @param {$classes_range} Associative array includes: template name and style
* @param {$params} Associative array includes: Template name modifier and value
*
*/
@mixin BootCreateRangeTemplate($classes_range, $params) {
    @each $template_name, $style in $classes_range {
        @each $modify, $value in $params {
            %#{$template_name}-#{$modify} {
                #{$style}:#{$value}
            }
        }
    }
}
/*
* Create templates for component with media query via range of template name and styles
*
* @param {$classes_range} Associative array includes: template name and style
* @param {$params} Associative array includes: Template name modifier and value
* @param {$breakpoint} Media query breakpoint
* @param {$type} Media query type: min | max
*
*/
@mixin BootCreateRangeMediaTemplate($classes_range, $params, $breakpoint, $type) {
    @if map-has-key($media, $breakpoint) {
        @each $template_name, $style in $classes_range {
            @each $modify, $value in $params {
                %#{$breakpoint}--#{$template_name}-#{$modify} {
                    @media only screen and (#{$type}-width: #{map-get($media, $breakpoint)}) {
                        #{$style}:#{$value}
                    }
                }
            }
        }
    }
    @else {
        @warn "Unfortunately, no value could be retrieved from your breakpoint. "
            + "Please make sure it is defined in `$breakpoints` map.";
    }
}
/*
* Create classes for component via range of class name and styles
*
* @param {$classes_range} Associative array includes: template name and style
* @param {$params} Associative array includes: Template name modifier and value
*
*/
@mixin BootCreateRangeClass($classes_range, $params) {
    @each $template_name, $style in $classes_range {
        @each $modify, $value in $params {
            .#{$template_name}-#{$modify} {
                #{$style}:#{$value} !important;
            }
        }
    }
}
/*
* Create classes for component with media query via range of class name and styles
*
* @param {$classes_range} Associative array includes: template name and style
* @param {$params} Associative array includes: Template name modifier and value
* @param {$breakpoint} Media query breakpoint
* @param {$type} Media query type: min | max
*
*/
@mixin BootCreateRangeMediaClass($classes_range, $params, $breakpoint, $type) {
    @if map-has-key($media, $breakpoint) {
        @each $template_name, $style in $classes_range {
            @each $modify, $value in $params {
                .#{$breakpoint}--#{$template_name}-#{$modify} {
                    @media only screen and (#{$type}-width: #{map-get($media, $breakpoint)}) {
                        #{$style}:#{$value} !important;
                    }
                }
            }
        }
    }
    @else {
        @warn "Unfortunately, no value could be retrieved from your breakpoint. "
            + "Please make sure it is defined in `$breakpoints` map.";
    }
}
/*
* Put your styles to media query
*
* @param {$media} Associated array of media query name and value in px
* @param {$breakpoint} Media query breakpoint
* @param {$type} Media query type: min | max
* @param {$mediaType} Media query type: width | height
*
*/
@mixin ConnectMedia($media,$breakpoint,$type,$mediaType) {
    @media only screen and (#{$type}-#{$mediaType}: #{map-get($media, $breakpoint)}) {
        @content;
    }
}
/*
* Put your styles to media query with defined width or height [new]
*
* @param {$type} Media query type: min | max
* @param {$mediaType} Media query type: width | height
* @param {$mediaValue} Media query size: example 750px
*
*/
@mixin ConnectMediaDefined($type,$mediaType, $mediaValue) {
    @media only screen and (#{$type}-#{$mediaType}: #{$mediaValue}) {
        @content;
    }
}
/*
* Put your styles to media query with screen width and height params
*
* @param {$media} Associated params with media name and value
* @param {$breakpoint} Media query breakpoint
* @param {$type} Media query type: min | max
* @param {media-horizontal} Associated params with media name and value for horizontal
* @param {$breakpointHorizontal} Media query breakpoint horizontal screen
* @param {$typeHorizontal} Media query type: min | max for horizontal
*
*/
@mixin ConnectMediaFull($media, $breakpoint, $type, $media-horizontal, $breakpointHorizontal,$typeHorizontal) {
    @media only screen and (#{$type}-width: #{map-get($media, $breakpoint)}) and (#{$typeHorizontal}-width: #{map-get($media-horizontal, $breakpointHorizontal)}) {
        @content;
    }
}
/*
* Generate template and his style rules via params
*
* @param {$params} Associative array includes: Template name modifier and value
*
*/
@mixin BootGenerateTemplateFromParams($params) {

    @each $class_name, $style_rule in $params {

        @each $style, $value in $style_rule {

            %#{$class_name}{
                #{$style}: #{$value} !important;
            }
        }
    }
}
/*
* Generate template and his style rules via params on hover effect
*
* @param {$params} Associative array includes: Template name modifier and value
*
*/
@mixin BootGenerateHoverTemplateFromParams($params) {

    @each $class_name, $style_rule in $params {

        @each $style, $value in $style_rule {

            %hov-#{$class_name}{
                &:hover{
                    #{$style}: #{$value} !important;
                }
            }
        }
    }
}
/*
* Generate template and his style rules via params with media queries
*
* @param {$params} Associative array includes: Template name modifier and value
* @param {$breakpoints_config} Associative array includes: media query breakpoint name and his value in px
* @param {$breakpoin_type} breakpoin type: max or min (width)
*
*/
@mixin BootMediaGenerateTemplateFromParams($params, $breakpoints_config, $breakpoin_type) {

    @each $class_name, $style_rule in $params {

        @each $style, $value in $style_rule {

            @each $breakpoint_name, $breakpoint_value in $breakpoints_config {

                @media only screen and (#{$breakpoin_type}-width: #{$breakpoint_value}) {
                    %#{$breakpoint_name}--#{$class_name}{
                        #{$style}: #{$value} !important;
                    }
                }
            }

        }
    }
}
/*
* Generate classes and his style rules via params
*
* @param {$params} Associative array includes: Class name modifier and value
*
*/
@mixin BootGenerateClassFromParams($params) {

    @each $class_name, $style_rule in $params {

        @each $style, $value in $style_rule {

            .#{$class_name}{
                #{$style}: #{$value};
            }
        }
    }
}
/*
* Generate classes and his style rules via params on hover effect
*
* @param {$params} Associative array includes: Class name modifier and value
*
*/
@mixin BootGenerateHoverClassFromParams($params) {

    @each $class_name, $style_rule in $params {

        @each $style, $value in $style_rule {

            .hov-#{$class_name}{
                &:hover{
                    #{$style}: #{$value};
                }
            }
        }
    }
}
/*
* Generate classes and his style rules via params with media queries
*
* @param {$params} Associative array includes: Class name modifier and value
* @param {$breakpoints_config} Associative array includes: media query breakpoint name and his value in px
* @param {$breakpoint_type} breakpoint type: max or min (width)
*
*/
@mixin BootMediaGenerateClassFromParams($params, $breakpoints_config, $breakpoint_type) {

    @each $class_name, $style_rule in $params {

        @each $style, $value in $style_rule {

            @each $breakpoint_name, $breakpoint_value in $breakpoints_config {

                @media only screen and (#{$breakpoint_type}-width: #{$breakpoint_value}) {
                    .#{$breakpoint_name}--#{$class_name}{
                        #{$style}: #{$value};
                    }
                }
            }

        }
    }
}
