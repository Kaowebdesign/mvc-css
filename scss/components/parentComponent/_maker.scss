/*
* Parent component _maker.scss
* 
* Here you can see basic functions which can help you generate classes.
* Child components can extend parent maker functions.
* 
*/


/*
* Create full class name for component with defined params
* 
* @param {$component_name} Class name
* @param {$element} Class name element
* @param {$params} Associative array includes: Class name modifier and value
* @param {$style} Css property
* 
*/
@mixin CreateComponent($component_name,$element,$params,$style) {
    @each $modifier,$value in $params {
        .#{$component_name}_#{$element}_#{$modifier}{
            #{$style}:$value;
        }
    }
}
/*
* Generate element and modifier for defined class name
* 
* @param {$elem} Class name element
* @param {$params} Associative array includes: Class name modifier and value
* @param {$style} Css property
* 
*/
@mixin Create($elem,$params,$style) {
    @each $modifier,$value in $params {
        &_#{$elem}_#{$modifier}{
            #{$style}:$value;
        }
    }
}
/*
* Generate element and modifier from associative array of configs
* 
* @param {$config} Associative array wich includes configs (Class name modifier and value)
* 
*/
@mixin CreateConfig($config){
    @each $type_style,$style_values in $config{
        // $str_start: str-length('$button');
        // $str_end: str-length(quote($style_values));
        // $modify: $style_values;
        &{
            @include Create($type_style,$style_values,$type_style);
        }
    }
}
/*
* Generate element with params
* 
* @param {$params} Associative array includes: Class name modifier and value
* @param {$style} Css property
* 
*/
@mixin CreateElement($params,$style){
    @each $elem,$value in $params {
        &_#{$elem}{
            #{$style}:#{$value};
        }
    }
}
/*
* Generate element and modifier with background image params
* 
* @param {$elem} Class name element
* @param {$params} Associative array includes: Class name modifier and value
* @param {$style} Css property
* 
*/
@mixin CreateBackImageRange($elem, $params, $style) {
    @each $modifier,$value in $params {
        &_#{$elem}_#{$modifier}{
            #{$style}:url(#{$value});
        }
    }
    
}
/*
* Create element and modifier in media queries
* 
* @param {$elem} Class name element
* @param {$params} Associative array includes: Class name modifier and value
* @param {$style} Css property
* @param {$breakpoint} Media query breakpoint
* @param {$type} Type of media 'max' or 'min'
* 
*/
@mixin CreateMedia($elem,$params,$style,$breakpoint,$type) {
    @media only screen and (#{$type}-width:$breakpoint) {
        @each $modifier,$value in $params {
            &_#{$elem}_#{$modifier}{
                #{$style}:$value;
            }
        }
    }
}
/*
* Connect two array of params
* 
* @param {$params} Associative array includes: Class name modifier and value
* @param {$additional_params} Additionl params
* @param {$style} Css property
* @param {$style_additional} Additional Css property
* 
*/
@mixin CreateRangeAdditional($params,$additional_params,$style,$style_additional){
    @each $class_name,$style_value in $params {
        &_#{$class_name}{
            #{$style}:#{$style_value};
            @each $in_style,$in_value in $additional_params{
                @if $in_style == $class_name{
                    #{$style_additional}:#{$in_value};
                }
            }
        }
    }
}
/*
*  Creates styles in some class
* 
* @param {$params} Associative array includes: Class name modifier and value
* 
*/
@mixin SetConfig($params) {
    @each $style,$value in $params {
        #{$style}:$value;
    }
}
/*
*  Creates hover styles in some class
* 
* @param {$params} Associative array includes: Class name modifier and value
* 
*/
@mixin SetHoverConfig($params) {
    &:hover {
        @each $style, $value in $params {
            #{$style}: $value;
        }
    }
}
/*
*  Creates styles in media query
* 
* @param {$params} Associative array includes: Class name modifier and value
* @param {$breakpoint} Media query breakpoint
* @param {$type} Type of media 'max' or 'min'
* 
*/
@mixin SetConfigMedia($params,$breakpoint,$type) {
    @media only screen and (#{$type}-width:$breakpoint) {
        @each $style,$value in $params {
            #{$style}:$value;
        }
    }
}
/*
*  Set extensions for some class
* 
* @param {$params} Array of extensions name
* 
*/
@mixin SetExtensions($params) {
    @each $ext_name in $params {
        @extend %#{$ext_name};
    }
}
/*
* Create templates for component
* 
* @param {$template_name} Base template name
* @param {$params} Associative array includes: Template name modifier and value
* @param {$style} Css property
* 
*/
@mixin BootCreateTemplate($template_name, $params, $style) {
    @each $modify, $value in $params {
        %#{$template_name}-#{$modify} {
            #{$style}:#{$value}
        }
    }
}
